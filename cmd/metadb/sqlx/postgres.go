package sqlx

import (
	"database/sql"
	"strings"
)

type Postgres struct {
	//Database *sql.DB
}

func OpenPostgres(dsn *DSN) (*DB, error) {
	s := "host=" + dsn.Host + " port=" + dsn.Port + " user=" + dsn.User + " password=" + dsn.Password + " dbname=" + dsn.DBName + " sslmode=" + dsn.SSLMode
	db, err := sql.Open("postgres", s)
	if err != nil {
		return nil, err
	}
	return &DB{DB: db, Type: &Postgres{}}, nil
}

//func (d *Postgres) DB() *sql.DB {
//	return d.Database
//}

func (d *Postgres) String() string {
	return "postgresql"
}

func (d *Postgres) EncodeString(s string) string {
	return encodeStringPostgres(s, true)
}

func (d *Postgres) Id(identifier string) string {
	return "\"" + identifier + "\""
}

func (d *Postgres) Identity() string {
	return "GENERATED BY DEFAULT AS IDENTITY"
}

func (d *Postgres) SupportsIndexes() bool {
	return true
}

func (d *Postgres) CreateIndex(name string, table *Table, columns []string) string {
	var clist strings.Builder
	for i, c := range columns {
		if i != 0 {
			clist.WriteString(",")
		}
		clist.WriteString(d.Id(c))
	}
	return "CREATE INDEX " + name + " ON " + table.Id(d) + "(" + clist.String() + ")"
}

func (d *Postgres) JSONType() string {
	return "JSON"
}
