package sqlx

import (
	"database/sql"
)

type Redshift struct {
	//Database *sql.DB
}

func OpenRedshift(dsn *DSN) (*DB, error) {
	s := "host=" + dsn.Host + " port=" + dsn.Port + " user=" + dsn.User + " password=" + dsn.Password + " dbname=" + dsn.DBName + " sslmode=" + dsn.SSLMode
	db, err := sql.Open("postgres", s)
	if err != nil {
		return nil, err
	}
	return &DB{DB: db, Type: &Redshift{}}, nil
}

//func (d *Redshift) DB() *sql.DB {
//	return d.Database
//}

func (d *Redshift) String() string {
	return "redshift"
}

func (d *Redshift) EncodeString(s string) string {
	return encodeStringPostgres(s, false)
}

func (d *Redshift) Identity() string {
	return "GENERATED BY DEFAULT AS IDENTITY"
}

func (d *Redshift) SupportsIndexes() bool {
	return false
}

func (d *Redshift) CreateIndex(name string, table *Table, columns []string) string {
	_ = name
	_ = table
	_ = columns
	return ""
}

func (d *Redshift) JSONType() string {
	return "VARCHAR(65535)"
}
